[{"C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\index.js":"1","C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\App.js":"2","C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\reportWebVitals.js":"3","C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\components\\Main.js":"4","C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\tools\\connection.js":"5","C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\components\\Home.js":"6","C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\components\\Login.js":"7","C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\std\\SocketCommunication.js":"8","C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\components\\Game.js":"9"},{"size":448,"mtime":1612549888231,"results":"10","hashOfConfig":"11"},{"size":185,"mtime":1613143410651,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":4405,"mtime":1613828962727,"results":"14","hashOfConfig":"11"},{"size":2416,"mtime":1613656644098,"results":"15","hashOfConfig":"11"},{"size":2382,"mtime":1613843761843,"results":"16","hashOfConfig":"11"},{"size":1331,"mtime":1613224278770,"results":"17","hashOfConfig":"11"},{"size":1048,"mtime":1613148084317,"results":"18","hashOfConfig":"11"},{"size":8404,"mtime":1613821269408,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"uen85c",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\index.js",[],["43","44"],"C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\App.js",["45"],"import './App.css';\nimport Main from './components/Main';\nimport React, { Component } from 'react';\n\nconst App = () => {\n\n    return (\n      <Main></Main>\n    );\n}\n\nexport default App;\n","C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\reportWebVitals.js",[],"C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\components\\Main.js",["46","47","48","49","50","51","52","53","54","55","56","57","58"],"C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\tools\\connection.js",[],"C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\components\\Home.js",["59","60","61","62","63"],"C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\components\\Login.js",["64","65","66","67","68"],"import React, { Component, forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { checkAccess, login } from '../tools/connection';\r\n\r\nconst Login = forwardRef ((props, ref) => {\r\n    const history = useHistory();\r\n    var [name, setName] = useState('');\r\n    var [pwd, setPwd] = useState('');\r\n\r\n    console.log(ref);\r\n\r\n    const update = e => {\r\n        if(e.target.id==='name')\r\n            setName(e.target.value);\r\n        else if (e.target.id==='pwd')\r\n            setPwd(e.target.value);\r\n    }\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        goHome () {\r\n            history.push('/home');\r\n        }\r\n    }));\r\n\r\n    const commit = () => {\r\n        props.send('login', {name: name, pwd: pwd});\r\n        //login(send, name, pwd);\r\n    }\r\n\r\n    const check = () => {\r\n        props.send('sec',\"hi\");\r\n        //checkAccess(client.current);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <input placeholder=\"Name\" value={name} id=\"name\" onChange={update}></input>\r\n            <input placeholder=\"Password\" value={pwd} id=\"pwd\" onChange={update}></input>\r\n            <button onClick={commit}>Send</button>\r\n            <button onClick={check}>Check</button>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Login\r\n","C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\std\\SocketCommunication.js",["69"],"export class SocketCommunication {\r\n\r\n    constructor(type, id, token, data) {\r\n        this.type = type;\r\n        this.data = data;\r\n        this.id = id;\r\n        this.token = token;\r\n    }\r\n\r\n    /**\r\n     * @returns Object as sendable string\r\n     */\r\n    getMsg() {\r\n        return JSON.stringify({type: this.type, id: this.id, token: this.token, data: this.data});\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {string} s string that has been received via websocket\r\n     */\r\n    set(s) {\r\n        try {\r\n            let e = JSON.parse(s);\r\n            if(e.type!==undefined) {\r\n                this.type = e.type;\r\n                this.data = e.data;\r\n                this.id = e.id;\r\n                this.token = e.token;\r\n            } else {\r\n                throw \"undefined object\";\r\n            }\r\n        } catch(ex) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nexport default SocketCommunication","C:\\Users\\matth\\Documents\\dev_projects_nosync\\quiz-app\\quiz-app\\src\\components\\Game.js",["70","71"],"import queryString from 'query-string';\r\nimport { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { getUser } from '../tools/connection';\r\n\r\nconst Game = forwardRef((props, ref) => {\r\n    const history = useHistory();\r\n\r\n    const WINASK = 5;\r\n    const WINSPEC = 2;\r\n\r\n    const [game, setGame] = useState(null);\r\n    const [player, setPlayer] = useState([]);\r\n    const [nextPlayer, setNextPlayer] = useState('');\r\n    const [nextQuestion, setNextQuestion] = useState('');\r\n    const [questionView, setQuestionView] = useState(false);\r\n    const [questions, setQuestions] = useState([]);\r\n    const params = useParams();\r\n\r\n    const QUESTIONPREFIX = ['A', 'B', 'C', 'D'];\r\n\r\n    const getGame = () => {\r\n        if(!params.id)\r\n            history.push('/home');\r\n        else\r\n            props.send('joingame', { id: params.id });\r\n    }\r\n\r\n    const addRound = () => {\r\n        props.send('addround', { player: nextPlayer, question: nextQuestion });\r\n        setNextPlayer('');\r\n        setNextQuestion('');\r\n        setQuestionView(false);\r\n    }\r\n\r\n    const requestQuestions = () => {\r\n        props.send('getquestions', null);\r\n    }\r\n\r\n    const updateRoundSelected = s => {\r\n        console.log(s);\r\n        props.send('updateroundselected', {roundID: getCurrentRound()._id, selected: s});\r\n    }\r\n\r\n    const getCurrentRound = () => {\r\n        if (game !== null)\r\n            return game.rounds[game.rounds.length - 1];\r\n        return null;\r\n    }\r\n\r\n    const leaveGame = () => {\r\n        props.send('leavegame', null);\r\n        history.push('/home');\r\n    }\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        loadGame(game) {\r\n            console.log(game);\r\n            setGame(game);\r\n        },\r\n        updatePlayerList(playerlist) {\r\n            setPlayer(playerlist);\r\n            console.log(playerlist);\r\n        },\r\n        getQuestions(questions) {\r\n            setQuestions(questions);\r\n        },\r\n        goLogin() {\r\n            history.push('/login');\r\n        }\r\n    }));\r\n\r\n    useEffect(() => {\r\n        //TODO wait until ws has been connected\r\n        setTimeout(getGame, 500);\r\n        setQuestionView(false);\r\n    }, []);\r\n\r\n    const isMod = () => {\r\n        return game !== null && game.mod === getUser().id;\r\n    }\r\n\r\n    const isSpec = () => {\r\n        let player = getCurrentRound().playerInRound.find(a => a.player === getUser().id);\r\n        return !!player && !isMod() && !player.ask;\r\n    }\r\n\r\n    const isAsk = () => {\r\n        let player = getCurrentRound().playerInRound.find(a => a.player === getUser().id);\r\n        return !!player && !isMod() && player.ask;\r\n    }\r\n\r\n    const selectPlayerToAsk = e => {\r\n        if (isMod()) {\r\n            if (e.target.id === nextPlayer)\r\n                setNextPlayer('');\r\n            else if (getUser().id !== e.target.id)\r\n                setNextPlayer(e.target.id);\r\n        }\r\n    }\r\n\r\n    const selectNextQuestion = e => {\r\n        console.log(e.target.id);\r\n        if (e.target.id === nextQuestion)\r\n            setNextQuestion('');\r\n        else\r\n            setNextQuestion(e.target.id);\r\n    }\r\n\r\n    const isSelectedAnswer = i => {\r\n        return getCurrentRound().playerInRound.find(a => a.ask).selected === i;\r\n    }\r\n\r\n    const isSpecSelected = i => {\r\n        return getCurrentRound().playerInRound.find(a => a.player === getUser().id).selected === i;\r\n    }\r\n\r\n    const isQuestionAlreadyAsked = questionID => {\r\n        return game.rounds.findIndex(a => {\r\n            console.log(a.question._id+'' === questionID+'');\r\n            return a.question._id+'' === questionID+'';\r\n        }) !== -1;\r\n    }\r\n\r\n    const endRound = () => {\r\n        props.send('endround', null);\r\n    }\r\n\r\n    const toggleQuestionView = () => {\r\n        setQuestionView(!questionView);\r\n        if (!questionView)\r\n            requestQuestions();\r\n    }\r\n\r\n    const renderState = () => {\r\n        if (game === null || game.state === 'lobby')\r\n            return renderLobby();\r\n        else if (game.state === 'question') {\r\n            return (\r\n                <div>\r\n                    {renderQuestion()}\r\n                    {isSpec()?renderSpecButtons():''}\r\n                </div>\r\n                );\r\n        }\r\n            \r\n    }\r\n\r\n    const getPoints = id => {\r\n        let ret = 0;\r\n        if (game !== null) {\r\n            game.rounds.forEach(r => {\r\n                let p = r.playerInRound.find(pr => pr.player === id);\r\n                if (!!p) {\r\n                    if (p.ask && p.selected === 0) ret += WINASK;\r\n                    else {\r\n                        let pw = r.playerInRound.find(pr => pr.ask);\r\n                        if (!!pw && ((pw.selected === 0 && p.selected === 1) ||\r\n                            (pw.selected > 0 && p.selected === 0))) {\r\n                            ret += WINSPEC;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    const renderLobby = () => {\r\n        return (\r\n            <div>\r\n                <div className=\"mainbuttons buttonarray\">\r\n                    <button onClick={leaveGame}>leave Game</button>\r\n                    <button onClick={getGame}>reload</button>\r\n                    {isMod() ? <button onClick={toggleQuestionView}>Select question</button> : ''}\r\n                    {isMod() && nextPlayer !== '' && nextQuestion !== '' ? <button onClick={addRound}>Start game</button> : ''}\r\n                </div>\r\n                {questionView ?\r\n                    <ul className=\"questionlist\">\r\n                        {questions.map(q =>\r\n                            <li\r\n                                className={(q._id === nextQuestion ? 'selected ' : '')+(isQuestionAlreadyAsked(q._id)?'graytext':'')}\r\n                                onClick={selectNextQuestion}\r\n                                id={q._id}>\r\n                                <div onClick={selectNextQuestion} id={q._id}>{q.question}</div>\r\n                            </li>\r\n                        )}\r\n                    </ul> :\r\n                    <ul className=\"playerlist\">\r\n                        {player.map(p =>\r\n                            <li\r\n                                onClick={selectPlayerToAsk}\r\n                                id={p.id}\r\n                                className={p.id === nextPlayer ? 'selected' : ''}>\r\n                                <div onClick={selectPlayerToAsk} id={p.id}>{p.name}</div>\r\n                                <div onClick={selectPlayerToAsk} id={p.id}>{(game !== null && p.id === game.mod ? 'mod' : getPoints(p.id))}</div>\r\n\r\n                            </li>)\r\n                        }\r\n                    </ul>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderQuestion = () => {\r\n        let round = getCurrentRound();\r\n        if (round !== null)\r\n            return (\r\n                <div>\r\n                    <div className=\"mainbuttons buttonarray\">\r\n                        {isMod()?<button onClick={endRound}>end Round</button>:''}\r\n                    </div>\r\n                    <div className=\"questionfield\">{round.question.question}</div>\r\n                    <div className=\"answersbuttons\">\r\n                        {round.order.map((a, i) => \r\n                            <button \r\n                                disabled={!isAsk()}\r\n                                onClick={() => updateRoundSelected(a)}\r\n                                className={isSelectedAnswer(a)?'selected':''}>\r\n                                <div>{QUESTIONPREFIX[i]+\")\"}</div>\r\n                                <div>{round.question.answers[a].text}</div>\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            );\r\n        return null;\r\n    }\r\n\r\n    const renderSpecButtons = () => {\r\n        return (\r\n            <div>\r\n                <button className={(isSpecSelected(1)? \"selected\":\"true\")} onClick={() => updateRoundSelected(1)}>true</button>\r\n                <button className={(isSpecSelected(0)? \"selected\":\"false\")} onClick={() => updateRoundSelected(0)}>false</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Game</h1>\r\n            {renderState()}\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Game",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":3,"column":17,"nodeType":"78","messageId":"79","endLine":3,"endColumn":26},{"ruleId":"76","severity":1,"message":"77","line":2,"column":17,"nodeType":"78","messageId":"79","endLine":2,"endColumn":26},{"ruleId":"76","severity":1,"message":"80","line":2,"column":28,"nodeType":"78","messageId":"79","endLine":2,"endColumn":36},{"ruleId":"76","severity":1,"message":"81","line":2,"column":49,"nodeType":"78","messageId":"79","endLine":2,"endColumn":55},{"ruleId":"76","severity":1,"message":"82","line":8,"column":5,"nodeType":"78","messageId":"79","endLine":8,"endColumn":13},{"ruleId":"76","severity":1,"message":"83","line":9,"column":5,"nodeType":"78","messageId":"79","endLine":9,"endColumn":15},{"ruleId":"76","severity":1,"message":"84","line":10,"column":5,"nodeType":"78","messageId":"79","endLine":10,"endColumn":15},{"ruleId":"76","severity":1,"message":"85","line":12,"column":44,"nodeType":"78","messageId":"79","endLine":12,"endColumn":48},{"ruleId":"76","severity":1,"message":"86","line":32,"column":9,"nodeType":"78","messageId":"79","endLine":32,"endColumn":24},{"ruleId":"76","severity":1,"message":"87","line":33,"column":9,"nodeType":"78","messageId":"79","endLine":33,"endColumn":20},{"ruleId":"76","severity":1,"message":"88","line":34,"column":9,"nodeType":"78","messageId":"79","endLine":34,"endColumn":24},{"ruleId":"76","severity":1,"message":"89","line":35,"column":9,"nodeType":"78","messageId":"79","endLine":35,"endColumn":19},{"ruleId":"76","severity":1,"message":"90","line":36,"column":9,"nodeType":"78","messageId":"79","endLine":36,"endColumn":21},{"ruleId":"91","severity":1,"message":"92","line":108,"column":8,"nodeType":"93","endLine":108,"endColumn":10,"suggestions":"94"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":26},{"ruleId":"76","severity":1,"message":"95","line":3,"column":22,"nodeType":"78","messageId":"79","endLine":3,"endColumn":28},{"ruleId":"76","severity":1,"message":"96","line":4,"column":5,"nodeType":"78","messageId":"79","endLine":4,"endColumn":11},{"ruleId":"76","severity":1,"message":"97","line":5,"column":5,"nodeType":"78","messageId":"79","endLine":5,"endColumn":10},{"ruleId":"91","severity":1,"message":"98","line":45,"column":8,"nodeType":"93","endLine":45,"endColumn":10,"suggestions":"99"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":26},{"ruleId":"76","severity":1,"message":"100","line":1,"column":40,"nodeType":"78","messageId":"79","endLine":1,"endColumn":49},{"ruleId":"76","severity":1,"message":"81","line":1,"column":72,"nodeType":"78","messageId":"79","endLine":1,"endColumn":78},{"ruleId":"76","severity":1,"message":"101","line":3,"column":10,"nodeType":"78","messageId":"79","endLine":3,"endColumn":21},{"ruleId":"76","severity":1,"message":"102","line":3,"column":23,"nodeType":"78","messageId":"79","endLine":3,"endColumn":28},{"ruleId":"103","severity":1,"message":"104","line":30,"column":17,"nodeType":"105","messageId":"106","endLine":30,"endColumn":42},{"ruleId":"76","severity":1,"message":"107","line":1,"column":8,"nodeType":"78","messageId":"79","endLine":1,"endColumn":19},{"ruleId":"91","severity":1,"message":"108","line":77,"column":8,"nodeType":"93","endLine":77,"endColumn":10,"suggestions":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useRef' is defined but never used.","'Redirect' is defined but never used.","'withRouter' is defined but never used.","'useHistory' is defined but never used.","'ping' is defined but never used.","'sendJsonMessage' is assigned a value but never used.","'lastMessage' is assigned a value but never used.","'lastJsonMessage' is assigned a value but never used.","'readyState' is assigned a value but never used.","'getWebSocket' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'refGame' and 'refHome'. Either include them or remove the dependency array.","ArrayExpression",["112"],"'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["113"],"'useEffect' is defined but never used.","'checkAccess' is defined but never used.","'login' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'queryString' is defined but never used.","React Hook useEffect has a missing dependency: 'getGame'. Either include it or remove the dependency array.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [refGame, refHome]",{"range":"121","text":"122"},"Update the dependencies array to be: [props]",{"range":"123","text":"124"},"Update the dependencies array to be: [getGame]",{"range":"125","text":"126"},[3679,3681],"[refGame, refHome]",[1112,1114],"[props]",[2241,2243],"[getGame]"]